package org.noehum7.trabajo;

import org.noehum7.trabajo.connection.ConexionBD;
import org.noehum7.trabajo.dao.ContratoRepository;
import org.noehum7.trabajo.model.Contrato;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.File;
import java.io.IOException;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;


/**
 * Clase principal que procesa el XML de los contratos, inserta los datos en la tabla contratos y genera un nuevo XML sin el tipo de contrato.
 */
public class Main {
    /**
     * Método principal que ejecuta el procesamiento del archivo XML.
     *
     * @param args Argumentos de la línea de comandos (no se utilizan).
     */
    public static void main(String[] args) {
        // Lista para almacenar los objetos contrato
        List<Contrato> contratos = new ArrayList<>();

        try (Connection connection = ConexionBD.getInstance()) {
            // Configuración del analizador de documentos XML
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document document = builder.parse(new File("contratos-adjudicados-jun-22.xml"));
            factory.setValidating(true);

            document.getDocumentElement().normalize();

            // Creamos la tabla contratos con los diferentes campos
            try (Statement stmt = connection.createStatement()) {
                stmt.execute("CREATE TABLE CONTRATOS(id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, nif VARCHAR2(255), adjudicatorio VARCHAR2(255), fecha_adjudicacion VARCHAR2(255), objeto_generico VARCHAR2(255), objeto VARCHAR2(255), importe VARCHAR2(255), tipo_contrato varchar2(255))");
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }

            // Obtener los nodos de tipo "Row" del documento XML
            NodeList nodeList = document.getElementsByTagName("Row");

            // Iteramos sobre los nodos
            for (int i = 1; i < nodeList.getLength(); i++) {
                // Variables para almacenar información del contrato
                String nif = "";
                String adjudicatario = "";
                String objetoGenerico = "";
                String objeto = "";
                String fechaAdjudicacion = "";
                String importe = "";
                String tipoContrato = "";

                Node rowNode = nodeList.item(i);
                if (rowNode.getNodeType() == Node.ELEMENT_NODE) {
                    Element contratoElem = (Element) rowNode;

                    // Obtenemos los nodos del tipo "Data"
                    NodeList dataNodes = contratoElem.getElementsByTagName("Data");

                    // Asignamos los valores a las variables
                    nif = dataNodes.item(0).getTextContent();
                    adjudicatario = dataNodes.item(1).getTextContent();
                    objetoGenerico = dataNodes.item(2).getTextContent();
                    objeto = dataNodes.item(3).getTextContent();
                    fechaAdjudicacion = dataNodes.item(4).getTextContent();
                    importe = dataNodes.item(5).getTextContent();
                    try {
                        tipoContrato = dataNodes.item(7).getTextContent();
                        if (!tipoContrato.isEmpty()) {
                            int intTipoContrato = Integer.parseInt(tipoContrato);
                            tipoContrato = String.valueOf(intTipoContrato);
                        }
                    } catch (NumberFormatException | NullPointerException e) {
                    }
                }

                // Creamos un objeto contrato y lo agrego a la lista de contratos
                Contrato contrato = new Contrato(nif, adjudicatario, fechaAdjudicacion, objetoGenerico, objeto, importe, tipoContrato);
                contratos.add(contrato);

                // Creamos una instancia de ContratoRepository para insertar cada contrato en la tabla
                ContratoRepository contratoRepo = new ContratoRepository();
                contratoRepo.insertarContrato(contrato);
            }

            // Creamos un nuevo documento XML que no tendrá el tipo de contrato
            DocumentBuilderFactory newDocFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder newDocBuilder = newDocFactory.newDocumentBuilder();
            Document newDocument = newDocBuilder.newDocument();

            // Creamos el elemento raíz del nuevo documento
            Element rootElement = newDocument.createElement("Contratos");
            newDocument.appendChild(rootElement);

            // Iteramos sobre la lista de contratos y se agregan al nuevo documento
            for (Contrato contrato : contratos) {
                Element contratoElement = newDocument.createElement("Contrato");

                Element nifElement = newDocument.createElement("NIF");
                nifElement.appendChild(newDocument.createTextNode(contrato.getNif()));
                contratoElement.appendChild(nifElement);

                Element adjudicatarioElement = newDocument.createElement("Adjudicatario");
                adjudicatarioElement.appendChild(newDocument.createTextNode(contrato.getAdjudicatario()));
                contratoElement.appendChild(adjudicatarioElement);

                Element objetoGenericoElement = newDocument.createElement("Objeto_generico");
                objetoGenericoElement.appendChild(newDocument.createTextNode(contrato.getObjetoGenerico()));
                contratoElement.appendChild(objetoGenericoElement);

                Element objetoElement = newDocument.createElement("Objeto");
                objetoElement.appendChild(newDocument.createTextNode(contrato.getObjeto()));
                contratoElement.appendChild(objetoElement);

                Element fechaAdjudicacionElement = newDocument.createElement("Fecha_adjudicacion");
                fechaAdjudicacionElement.appendChild(newDocument.createTextNode(contrato.getFechaAdjudicacion()));
                contratoElement.appendChild(fechaAdjudicacionElement);

                Element importeElement = newDocument.createElement("Importe");
                importeElement.appendChild(newDocument.createTextNode(contrato.getImporte()));
                contratoElement.appendChild(importeElement);

                rootElement.appendChild(contratoElement);
            }

            // Guardamos el nuevo documento XML
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            DOMSource source = new DOMSource(newDocument);
            StreamResult result = new StreamResult(new File("contratos-sin-tipo.xml"));
            transformer.transform(source, result);

            System.out.println("Nuevo archivo XML creado sin el tipo de contrato.");

        } catch (SQLException | ParserConfigurationException | IOException | SAXException | TransformerException e) {
            throw new RuntimeException(e);
        }
    }
}
